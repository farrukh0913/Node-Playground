{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Config Module",
    "license": {
      "name": "Proprietary",
      "url": "https://iotechglobal.io/licenses/LICENSE-1.0.html"
    },
    "x-vendor-info": {
      "name": "IoTech LLC",
      "url": "http://localhost:3000",
      "email": "admin@iotechglobal.io",
      "address": null,
      "street": null,
      "city": null,
      "state": null,
      "zip": null,
      "country": null
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "summary": "get users operation",
        "operationId": "readAllUsers",
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "tags": ["asset"],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payload"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payload"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "create component operation",
        "operationId": "createComponent",
        "tags": ["component, tag"],
        "requestBody": {
          "description": "create component post request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payload"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payload"
                }
              }
            }
          }
        }
      }
    },
    "/components/{component_uuid}": {
      "put": {
        "summary": "update component operation",
        "operationId": "updateComponent",
        "tags": ["component, tag"],
        "parameters": [
          {
            "name": "component_uuid",
            "in": "path",
            "description": "Component UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update component and tag put request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payload"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payload"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payload"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete component operation",
        "operationId": "deleteComponent",
        "tags": ["component, tag"],
        "parameters": [
          {
            "name": "component_uuid",
            "in": "path",
            "description": "Component UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payload"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payload"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "iotech_config_api": {
        "scheme": "bearer",
        "type": "http",
        "description": "Token based authentication"
      }
    },
    "schemas": {
      "Payload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Header"
          },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "data": {},
              "error": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        ]
      },
      "EntityDetails": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Component"
          }]
      },
      "Header": {
        "type": "object",
        "required": [
          "specVersion",
          "type",
          "source",
          "id",
          "time",
          "dataContentType"
        ],
        "properties": {
          "specVersion": {
            "type": "string",
            "example": "1.0.0"
          },
          "type": {
            "description": "Operation:(Get) EntityType: (TsRead)",
            "type": "string",
            "example": "<Operation>-<EntityType>-req"
          },
          "source": {
            "description": "The source system (client) initiating this request",
            "type": "string",
            "example": "intellija-ui"
          },
          "id": {
            "description": "Unique ID generated by the system that created this request",
            "type": "string",
            "example": "C234-1234-1234"
          },
          "time": {
            "description": "Time in ISO 8601 format when request created",
            "type": "string",
            "example": "2020-03-31T17:31:00.123Z"
          },
          "dataContentType": {
            "type": "string",
            "example": "application/json"
          }
        }
      },
      "Component": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "componentTypeId": {
            "type": "integer"
          },
          "vendorId": {
            "type": "integer"
          },
          "notes": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean"
          },
          "sourceModelId": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "example": "500 or 400"
          },
          "message": {
            "type": "string",
            "example": "something went wrong"
          }
        }
      }
    }
  }
}
